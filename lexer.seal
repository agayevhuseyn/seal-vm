include './token.seal'

const tokens = []

var
  line = 1
  i = 0

extern define get_tokens(src)
  while i < len(src)
    get_token(src)

  push(tokens, Token(TOKEN_EOF, 'EOF', line))
  return tokens

define get_token(src)
  const c = src[i]
  i += 1
  if c == '('
    push(tokens, Token(TOKEN_LPAREN, c, line))
  else if c == ')'
    push(tokens, Token(TOKEN_RPAREN, c, line))
  else if c == '+'
    push(tokens, Token(TOKEN_PLUS, c, line))
  else if c == '-'
    push(tokens, Token(TOKEN_MINUS, c, line))
  else if c == '*'
    push(tokens, Token(TOKEN_MUL, c, line))
  else if c == '/'
    push(tokens, Token(TOKEN_DIV, c, line))
  else if c == '%'
    push(tokens, Token(TOKEN_MOD, c, line))
  else if c == '\n' or c == '\t' or c == ' '
    if c == '\n' then line += 1
  else if is_digit(c)
    push(tokens, Token(TOKEN_INT, get_number(src), line))
  else if is_alpha(c)
    push(tokens, Token(TOKEN_ID, get_id(src), line))
  else
    writeln('at line:', line, '\nunrecognized character:', c)
    exit(1)

define get_id(src)
  i -= 1
  var word = ''
  while i < len(src)
    const c = src[i]
    if !is_alpha(c)
      return word
    word += c
    i += 1

define get_number(src)
  i -= 1
  var word = ''
  while i < len(src)
    const c = src[i]
    if !is_digit(c)
      return to_number(word)
    word += c
    i += 1

define is_digit(c)
  if (c == '0' or
      c == '1' or
      c == '2' or
      c == '3' or
      c == '4' or
      c == '5' or
      c == '6' or
      c == '7' or
      c == '8' or
      c == '9') then return true
  return false

define is_number(s)
  for c in s
    if not is_digit(c) then return false
  return true

define to_digit(c)
  if c == '0' then return 0
  if c == '1' then return 1
  if c == '2' then return 2
  if c == '3' then return 3
  if c == '4' then return 4
  if c == '5' then return 5
  if c == '6' then return 6
  if c == '7' then return 7
  if c == '8' then return 8
  if c == '9' then return 9

define to_number(s)
  var num = 0
  for c in s do num = num * 10 + to_digit(c)
  return num

define is_alpha(c)
  if (c == 'A' or
      c == 'B' or
      c == 'C' or
      c == 'D' or
      c == 'E' or
      c == 'F' or
      c == 'G' or
      c == 'H' or
      c == 'I' or
      c == 'J' or
      c == 'K' or
      c == 'L' or
      c == 'M' or
      c == 'N' or
      c == 'O' or
      c == 'P' or
      c == 'Q' or
      c == 'R' or
      c == 'S' or
      c == 'T' or
      c == 'U' or
      c == 'V' or
      c == 'W' or
      c == 'X' or
      c == 'Y' or
      c == 'Z' or
      c == 'a' or
      c == 'b' or
      c == 'c' or
      c == 'd' or
      c == 'e' or
      c == 'f' or
      c == 'g' or
      c == 'h' or
      c == 'i' or
      c == 'j' or
      c == 'k' or
      c == 'l' or
      c == 'm' or
      c == 'n' or
      c == 'o' or
      c == 'p' or
      c == 'q' or
      c == 'r' or
      c == 's' or
      c == 't' or
      c == 'u' or
      c == 'v' or
      c == 'w' or
      c == 'x' or
      c == 'y' or
      c == 'z') then return true
  return false
