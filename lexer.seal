include './token.seal'

extern define Lexer(src)
  return {
    src = src,
    tokens = [],
    line = 1,
    i = 0,
    indent_stack = [],
    paren_stack = [],
    paren_line_stack = [],
    cur_indent = 0,
    encountered_word = false,
    token_after_comment = false
  }

define is_end(lexer)
  return lexer.i >= len(lexer.src)

define peek(lexer)
  return if is_end(lexer) then null else lexer.src[lexer.i]

define peek_offset(lexer, offset)
  const i = lexer.i + offset
  return if i >= 0 and i < len(lexer.src) then lexer.src[i] else null

define peek_top(stack)
  return stack[len(stack) - 1]

define adv(lexer)
  const c = peek(lexer)
  lexer.i += 1
  return c

define match(lexer, c)
  return peek(lexer) == c

define error(lexer, err, line)
  writeln('seal: line', if line == 0 then lexer.line else line,
          '\nsyntax error:', err)
  exit(1)

extern define get_tokens(lexer)
  while not is_end(lexer)
    get_token(lexer)
  
  if len(lexer.indent_stack) > 0
    error(
      lexer,
      format('% was never closed', peek_top(lexer.paren_stack)),
      peek_top(lexer.paren_line_stack)
    )

  push(lexer.tokens, Token(TOKEN_EOF, 'EOF', lexer.line))

define get_token(lexer)
  const c = adv(lexer)
  var
    encountered_word = true
    token

  if c == ' ' or c == '\t'
    if not lexer.encountered_word
      lexer.cur_indent += 1
      encountered_word = false
  else if c == '\n'
    lexer.cur_indent = 0
    encountered_word = false
    if lexer.encountered_word and len(lexer.paren_stack)
      token = Token(TOK_NEWL, '<newline>', lexer.line)
    lexer.token_after_comment = false
    lexer.line += 1
  else if c == '.'
    tok = Token(TOK_DOT, c, lexer.line)
  else if c == ':'
    tok = Token(TOK_COLON, c, lexer.line)
  else if c == ','
    tok = Token(TOK_COMMA, c, lexer.line)
  else if c == '+'
    if match(lexer, '=')
      tok = Token(TOK_PLUS_ASSIGN, c + adv(lexer), lexer.line)
    else
      tok = Token(TOK_PLUS, c, lexer.line)
  else if c == '-'
    if match(lexer, '=')
      tok = Token(TOK_MINUS_ASSIGN, c + adv(lexer), lexer.line)
    else
      tok = Token(TOK_MINUS, c, lexer.line)
  else if c == '*'
    if match(lexer, '=')
      tok = Token(TOK_MUL_ASSIGN, c + adv(lexer), lexer.line)
    else
      tok = Token(TOK_MUL, c, lexer.line)
  else if c == '/'
    if match(lexer, '=')
      tok = Token(TOK_DIV_ASSIGN, c + adv(lexer), lexer.line)
    else
      tok = Token(TOK_DIV, c, lexer.line)
  else if c == '%'
    if match(lexer, '=')
      tok = Token(TOK_MOD_ASSIGN, c + adv(lexer), lexer.line)
    else
      tok = Token(TOK_MOD, c, lexer.line)
  else if c == '^'
    if match(lexer, '=')
      tok = Token(TOK_POW_ASSIGN, c + adv(lexer), lexer.line)
    else
      tok = Token(TOK_POW, c, lexer.line)
  else if c == '='
    if match(lexer, '=')
      tok = Token(TOK_EQ, c + adv(lexer), lexer.line)
    else
      tok = Token(TOK_ASSIGN, c, lexer.line)
  else if c == '!'
    if match(lexer, '=')
      tok = Token(TOK_NE, c + adv(lexer), lexer.line)
    else
      tok = Token(TOK_NOT, c, lexer.line)
  else if c == '>'
    if match(lexer, '=')
      tok = Token(TOK_GE, c + adv(lexer), lexer.line)
    else
      tok = Token(TOK_GT, c, lexer.line)
  else if c == '<'
    if match(lexer, '=')
      tok = Token(TOK_LE, c + adv(lexer), lexer.line)
    else
      tok = Token(TOK_LT, c, lexer.line)


define get_id(lexer)
  lexer.i -= 1
  var word = ''
  while lexer.i < len(lexer.src)
    const c = lexer.src[lexer.i]
    if !is_alpha(c)
      return word
    word += c
    lexer.i += 1

define get_number(lexer)
  lexer.i -= 1
  var word = ''
  while lexer.i < len(lexer.src)
    const c = lexer.src[lexer.i]
    if !is_digit(c)
      return to_number(word)
    word += c
    lexer.i += 1

define is_digit(c)
  return (c == '0' or
          c == '1' or
          c == '2' or
          c == '3' or
          c == '4' or
          c == '5' or
          c == '6' or
          c == '7' or
          c == '8' or
          c == '9')

define is_number(s)
  for c in s
    if not is_digit(c) then return false
  return true

define to_digit(c)
  if c == '0' then return 0
  if c == '1' then return 1
  if c == '2' then return 2
  if c == '3' then return 3
  if c == '4' then return 4
  if c == '5' then return 5
  if c == '6' then return 6
  if c == '7' then return 7
  if c == '8' then return 8
  if c == '9' then return 9

define to_number(s)
  var num = 0
  for c in s do num = num * 10 + to_digit(c)
  return num

define is_alpha(c)
  return (c == 'A' or
          c == 'B' or
          c == 'C' or
          c == 'D' or
          c == 'E' or
          c == 'F' or
          c == 'G' or
          c == 'H' or
          c == 'I' or
          c == 'J' or
          c == 'K' or
          c == 'L' or
          c == 'M' or
          c == 'N' or
          c == 'O' or
          c == 'P' or
          c == 'Q' or
          c == 'R' or
          c == 'S' or
          c == 'T' or
          c == 'U' or
          c == 'V' or
          c == 'W' or
          c == 'X' or
          c == 'Y' or
          c == 'Z' or
          c == 'a' or
          c == 'b' or
          c == 'c' or
          c == 'd' or
          c == 'e' or
          c == 'f' or
          c == 'g' or
          c == 'h' or
          c == 'i' or
          c == 'j' or
          c == 'k' or
          c == 'l' or
          c == 'm' or
          c == 'n' or
          c == 'o' or
          c == 'p' or
          c == 'q' or
          c == 'r' or
          c == 's' or
          c == 't' or
          c == 'u' or
          c == 'v' or
          c == 'w' or
          c == 'x' or
          c == 'y' or
          c == 'z')

define is_id(c)
  return c == '_' or is_alpha(c)

define is_alnum(c)
  return is_digit(c) or is_alpha(c)
