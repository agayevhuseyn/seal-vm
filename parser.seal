include './token.seal'
include './ast.seal'

define Parser(tokens)
  return {
    tokens = tokens,
    i = 0
  }

extern define parse(tokens)
  const
    parser = Parser(tokens)
    body = []

  while parser.i < len(parser.tokens)
    if cur(parser).type == TOKEN_EOF then stop

    push(body, expr(parser))
  
  return AST(AST_COMP, body)

define cur(parser)
  return parser.tokens[parser.i]

define adv(parser)
  const token = cur(parser)
  parser.i += 1
  return token

define match(parser, type)
  return if cur(parser).type == type then true else false

define eat(parser, type)
  if cur(parser).type != type
    writeln(format('line: %\nexpected type %, got %',
            cur(parser).line, token_name(type), token_name(cur(parser).type)))
    exit(1)
  return adv(parser)

define expr(parser)
  return term(parser)

define term(parser) 
  var left = factor(parser)

  while cur(parser).type == TOKEN_PLUS or cur(parser).type == TOKEN_MINUS
    var bin = Binary(left, adv(parser).type, factor(parser))
    left = bin

  return left
    
define factor(parser)
  var left = primary(parser)

  while (cur(parser).type == TOKEN_MUL or
         cur(parser).type == TOKEN_DIV or
         cur(parser).type == TOKEN_MOD)
    var bin = Binary(left, adv(parser).type, primary(parser))
    left = bin

  return left

define primary(parser)
  const token = cur(parser)

  if token.type == TOKEN_INT
    return AST(AST_INT, adv(parser).val)
  if token.type == TOKEN_LPAREN
    adv(parser)
    const expr = expr(parser)
    eat(parser, TOKEN_RPAREN)
    return expr
  if token.type == TOKEN_ID
    return func_call(parser)
  writeln('unexpected token at factor:', token)
  exit(1)

define func_call(parser)
  const name = eat(parser, TOKEN_ID)
  eat(parser, TOKEN_LPAREN)
  const arg = expr(parser)
  eat(parser, TOKEN_RPAREN)
  return Func_Call(name.val, arg)
